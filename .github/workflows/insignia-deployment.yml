name: Build and Deploy LLMOps Staging

on:
  workflow_dispatch:
    inputs:
      docker_tag:
        description: 'Tag untuk Docker image'
        required: true
        default: 'latest'
        type: string

jobs:
  build-and-push:
    runs-on: [executor]
    env:
      FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true  

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

    - name: Build Docker image
      run: |
        cd ${{ secrets.LLM_PATH }}
        git switch llmops
        git pull origin llmops
        
        # Build Docker image with the provided tag
        docker build -t ${{ secrets.ECR_REGISTRY }}/llmops-dify-api:${{ github.event.inputs.docker_tag }} .

    - name: Push Docker image
      run: |
        # Push Docker image with the provided tag
        docker push ${{ secrets.ECR_REGISTRY }}/llmops-dify-api:${{ github.event.inputs.docker_tag }}

    - name: List Docker images
      run: docker images

  deploy:
    runs-on: [executor] 
    needs: build-and-push  

    steps:
    - name: SSH into VM and Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          aws ecr get-login-password --region ${{ secrets.REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          docker ps
          cd ${{ secrets.TARGET_PATH }}
          git switch llmops
          git pull origin llmops
          
          # Optionally, pull the latest image on the VM
          docker pull ${{ secrets.ECR_REGISTRY }}/llmops-dify-api:${{ github.event.inputs.docker_tag }}

          docker compose down

          # Ensure a 20-second delay before bringing up new containers
          sleep 20

          docker compose up -d
